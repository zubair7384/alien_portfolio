@tailwind base;
@tailwind components;
@tailwind utilities;
@import url("https://fonts.googleapis.com/css2?family=Finger+Paint&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Figtree:wght@300;400;500&display=swap");
body {
  margin: 0;
  padding: 0;
  font-family: "Figtree", sans-serif;
  background-color: #000;
}

.mainContainer {
  max-width: 90%;
  margin: 0 auto;
  .headerWrapper {
    height: 120px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    .headerName {
      font-size: 16px;
      color: #bdbdbd;
      z-index: 1;
    }
    .headerTitle {
      font-size: 42px;
      font-weight: 600;
      color: #00ff29;
      letter-spacing: 6px;
      word-spacing: 6px;
    }
  }
  .descriptionContaoner {
    position: relative;
    display: flex;
    justify-content: space-between;
    padding: 100px 0;
    .greenEllipse {
      width: 400px;
      height: 400px;
      border-radius: 50%;
      background-color: #00ff29;
      position: absolute;
      box-shadow: 0px 0px 0px 140px #00ff29;
      filter: blur(100px);
      z-index: 0;
      left: 45%;
      top: 24%;
    }
    .desCol {
      width: 40%;
      h2 {
        font-size: 36px;
        color: #fff;
        line-height: 120%;
        text-align: left;
        margin-bottom: 53px;
      }
      p {
        font-size: 16px;
        color: #828282;
        line-height: 120%;
        text-align: left;
        margin-bottom: 20px;
      }
    }
    .featuredCol {
      width: 30%;
      position: relative;
      h3 {
        font-size: 36px;
        color: #fff;
        margin-bottom: 10px;
      }
      h4 {
        font-size: 24px;
        font-weight: 400;
        color: #fff;
        margin: 20px 0;
      }
      .lineBottom {
        height: 1px;
        background-color: #fff;
        border: none;
      }
      ul {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        gap: 20px;
        margin-bottom: 26px;
        li {
          cursor: pointer;
          a {
            img {
              width: 195px;
              height: auto;
            }
          }

          .fahrWrapper {
            border-radius: 5px;
            padding: 4.6px 10px;
            width: 195px;
            font-weight: 300;
            font-size: 24px;
            background-color: #d2232a;
            color: #ffffff;
            span {
              font-weight: 600;
            }
          }
        }
      }
    }
  }
  .cardsContainer {
    position: relative;
    ul {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      row-gap: 0.8rem;
      li {
        cursor: pointer;
        transition: transform 0.5s;
        &:hover {
          // transform: scale(1.04);
          filter: brightness(0.5);
        }
        img {
          width: 270px;
        }
      }
    }
  }
}

.footerContainer {
  margin-top: 100px;
  background-color: #000000;
  marquee {
    border-bottom: 1px solid #f2f2f2;
    background-color: #00ff29;
  }
  .footerMarqueeText {
    // font-family: "Finger Paint", cursive;
    font-size: 154px;
    font-weight: 600;
    color: #000;
  }
  .mainFooter {
    width: 90%;
    margin: 0 auto;
    height: 94px;
    background-color: #000000;
    display: flex;
    align-items: center;
    justify-content: space-between;
    p {
      color: #f2f2f2;
      font-size: 14px;
    }
  }
}

// Glitch Effect

#wrapper {
  text-align: center;
}

.sub {
  color: rgb(100, 220, 220);
  // letter-spacing: 1em;
}

// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
  position: relative;
  color: white;
  font-size: 4em;
  letter-spacing: 0.5em;
  /* Animation provies a slight random skew. Check bottom of doc
 for more information on how to random skew. */
  animation: glitch-skew 1s infinite linear alternate-reverse;

  // Creates a copy before our text.
  &::before {
    // Duplicates our text with the mixin.
    @include glitchCopy;
    // Scoots text slightly to the left for the color offset.
    left: 2px;
    // Creates the color 'shadow' that happens on the glitch.
    text-shadow: -2px 0 #ff00c1;
    /* Creates an initial clip for our glitch. This works in
   a typical top,right,bottom,left fashion and creates a mask
   to only show a certain part of the glitch at a time. */
    clip: rect(44px, 450px, 56px, 0);
    /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
   with an alternating animation to keep things fresh. */
    animation: glitch-anim 5s infinite linear alternate-reverse;
  }

  // Creates a copy after our text. Note comments from ::before.
  &::after {
    @include glitchCopy;
    left: -2px;
    text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
    animation: glitch-anim2 1s infinite linear alternate-reverse;
  }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100) + px, 9999px, random(100) + px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100) + px, 9999px, random(100) + px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}
